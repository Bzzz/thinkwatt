#!/bin/bash
#
# twat (thinkwatt):
# record power consumption, calculate average and create a gnuplot graph
#
# requires:
# tp_smapi (kernel module)
# gnuplot
#
# TO-DO:
# * clean-up function
# * get rid of awk in the "for" loop in function record()

# plotting variables {{{
# information for gnuplot. this is the place where you can rename the x/y-labels on your graph, give the graph a custom title and such
TITLE="power consumption of my thinkpad"
XLABEL="sec (seconds)"
YLABEL="W (Watt)"
TERMINAL="png"
TITLE1="real"
TITLE2="trend"
# if you want to set a specific range for x/y-axis do it here:
#YRANGE="[4000:16000]"
#XRANGE="[0:2000]"

# use $TDIR to have twat save files in a different directory.
# twat will save two files:
# 1) a .plt file (containing plot instructions)
# 2) a .png file (the plot graphic)
TDIR="/tmp/thinkwatt"
PLOTFILE="$TDIR/$$.plt"
PNGFILE="$TDIR/$$.png"
# }}}

# utilities {{{
message() {
  cat << EOF
usage:	thinkwatt [ -r <seconds> | -p | -a ] file

options:	
	-r, --record	start recording the power consumption
	-p, --plot	create a plot image
	-a, --average	calculate the average power consumption
	-h, --help	show this help text
	
examples:
	thinkwatt -r 300 consumption.dat
	thinkwatt -r 60 /foo/bar/consumption.dat
	
	thinkwatt -p /foo/bar/consumption.dat
EOF
  exit 1
}

errorout() { echo "error: $*" >&2; exit 1; }
# }}}

[[ -z $(lsmod | grep smapi) ]] && errorout 'please load the kernel module tp_smapi first.'

# record {{{
record() {

  local seconds
  seconds="$1"
  
  local datafile
  datafile="$2"
  
  [[ "$seconds" =~ ^[0-9]+$ ]] || errorout "please specify the time in seconds."
  [[ "$datafile" ]] || errorout 'please specify a file to write to.'

  local BAT=/sys/devices/platform/smapi/BAT0
  
  if [[ -f "$datafile" ]];then
    read -p "Overwrite $2? y/n "
    [[ "$REPLY" = "y" ]] || exit 0      
  fi
  
  local tmpfile
  tmpfile=/tmp/$$.dat
  
  echo "recording power consumption for the next $seconds seconds"
  
  touch "$tmpfile"
  
  for ((i=0; i<=$seconds; i++));do
    sleep 1
    cat "$BAT"/power_now | awk '{print $1/1000}' >> "$tmpfile"
  done

  # we strip the leading "-" from the data file
  sed -i 's/-//g' "$tmpfile"
  
  # create $2 and move 
  local dir #file

  #file=$(basename "$2")
  dir=$(dirname "$2")
  
  [[ -d "$dir" ]] || mkdir -p "$dir"
  
  mv "$tmpfile" "$datafile" && echo "recorded data succesfully written to $datafile"
  echo "average consumption during the last $seconds seconds was $(average $datafile) W"
  
  read -p "Do you want to create a graphic now, too? y/n "
  [[ "$REPLY" = "y" ]] && plot $2 || exit 0

}
# }}}

# calculate average {{{
average() {

  local datafile
  datafile="$@"
  
  [[ "$datafile" ]] || errorout 'please specify a file to read from.'
  [[ -f "$datafile" ]] || errorout 'file not found.'
  
  awk 'BEGIN{s=0;}{s+=($1);}END{print s/NR;}' "$datafile"
}
# }}}

# make the plot file {{{
makeplotfile() {

  cat << EOF
# gnuplot file
# created by thinkwatt
# $(date +%Y-%m-%d\ %T)

set title "$TITLE"
set xlabel "$XLABEL"
set ylabel "$YLABEL"
set terminal $TERMINAL
set output "$PNGFILE"
EOF
[[ $YRANGE ]] && echo "set yrange $YRANGE"
[[ $XRANGE ]] && echo "set yrange $YRANGE"
echo 
echo "plot \"$(pwd)/$datafile\" using (\$1) with lines title \"$TITLE1\" lt 2, \
\"$datafile\" using (\$1) smooth bezier title \"$TITLE2\" lt 1, \
$avg title \"average ($avg W)\""

}
# }}}

# do the plotting
plot() {

  [[ -z $(find $(sed 's/:/ /g' <<<$PATH) 2>/dev/null | grep -is gnuplot) ]] && errorout 'you have to install gnuplot first'
 
  local datafile
  datafile="$@"
  
  [[ "$datafile" ]] || errorout 'please specify a file to read from.'
  [[ -f "$datafile" ]] || errorout 'file not found.'
   
  avg=$(average "$datafile" | cut -c1-4)
  
  [[ -d "$TDIR" ]] || mkdir -p "$TDIR"
  makeplotfile > "$PLOTFILE" || errorout 'failed writing plotfile'
  gnuplot "$PLOTFILE"
  echo "graph created as $PNGFILE"

}

# parse options {{{
parse_options() {

  [[ -z "$1" ]] && message

  while [[ -n "$1" ]]; do
    case "$1" in
      -r|--record)  mode='record'	;;
      -p|--plot)    mode='plot'		;;
      -a|--average) mode='average'	;;
      -h|--help)    message		;;
      *)            args+=( "$1" )	;;
    esac
    shift
  done
}
# }}}

# main {{{
main() {

  case "$mode" in
    record)  record "${args[@]}"	;;
    average) average "${args[@]}"	;;
    plot)    plot "${args[@]}"		;;
    *)       errorout 'invalid mode. use -r, -p or -a.' ;;
  esac
  
}
# }}}

parse_options "$@"
main
