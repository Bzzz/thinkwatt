#!/bin/bash
#
# twat (thinkwatt):
# record power consumption, calculate average and create a gnuplot graph
#
# TO-DO:
# * add more options (e.g. for specifying a different gnuplot title or png output)

# utilities {{{
message() {
  cat << EOF
usage:	thinkwatt [ -r <seconds> | -p | -a ] file

options:	
	-r, --record	start recording the power consumption; optional: specify output file
			once the file is recorded you'll have the option to directly create a gnuplot graph from it
	-p, --plot	create a plot image from a data file
	-a, --average	calculate the average power consumption from a data file
	-h, --help	show this help text
	
examples:
	thinkwatt -r 300 /foo/bar/consumption.dat
	thinkwatt -r 900
	
notes:
	don't use spaces in the path- and filename as it will currently break the script
EOF
  exit 1
}

errorout() { echo "error: $*" >&2; exit 1; }

check_ac() {
  local acfile=/sys/class/power_supply/AC/online
  [[ $(cat $acfile) = 0 ]] || errorout 'please unplug the ac adapater first'
}
check_datafile() {
  local valid_data=$(file "$@" | grep "^$@: ASCII text$")
  [[ $valid_data ]] || errorout "$@ is not a valid data file"
}
# }}}

# plotting variables {{{
DATE=$(date +%Y-%m-%d,\ %T)
TITLE="power consumption of my thinkpad, created by thinkwatt on $DATE"
XLABEL="sec (seconds)"
YLABEL="W (Watt)"
TERMINAL="png"
## some more options for gnuplot, enable them here if you like
#TITLE1="your custom title for line1"
#TITLE2="for line2"
#TITLE3="for line 3"
#YRANGE="[4000:16000]"
#XRANGE="[0:2000]"

# use $TDIR to have twat save files in a different directory.
# twat will save two files:
# 1) a .plt file (containing plot instructions) in case you want to reuse/modify it
# 2) a .png file (the plot graphic)
TDIR="/tmp/thinkwatt"
PLOTFILE="$TDIR/$$.plt"
PNGFILE=$(basename $2 .dat).png
# }}}

# record {{{
record() {

  local seconds="$1"
  local datafile="$2"
  
  [[ "$seconds" =~ ^[0-9]+$ ]] || errorout "please specify the time in seconds."

  SMAPI=$(lsmod | grep smapi)
  if [[ $SMAPI ]];then
    local powerfile=/sys/devices/platform/smapi/BAT0/power_now
  else
    echo "you don't have tp_smapi loaded"
    echo "if you're using a thinkpad you should modprobe tp_smapi for more accurate readings"
    local powerfile=/sys/class/power_supply/BAT0/power_now
  fi

  if [[ -f "$datafile" ]];then
    read -p "overwrite $datafile? y/n "
    [[ "$REPLY" = "y" ]] || exit 0
  fi
  
  local tmpfile1=/tmp/$$.dat
  touch "$tmpfile1"
  
  echo "recording power consumption for the next $seconds seconds"
  
  for ((i=0; i<=$seconds; i++));do
    sleep 1
    cat "$powerfile" >> "$tmpfile1"
  done
  
  [[ -d $TDIR ]] || mkdir -p $TDIR
  local tmpfile=$TDIR/$$.dat
  
  # file formatting
  if [[ $SMAPI ]];then
    # we strip the leading "-" from the data file
    sed -i 's/-//g' "$tmpfile1"
  else
    # strip the trailing last 3 characters
     sed -i 's/.\{3\}$//' "$tmpfile1"
  fi
  # and divide by 1000 to convert from mW to W
  cat "$tmpfile1" | awk '{print $1/1000}' > "$tmpfile"
  
  if [[ $datafile ]];then
    local dir=$(dirname "$datafile")
    local file=$(basename "$datafile")

    [[ -d "$dir" ]] || mkdir -p "$dir"
    
    outputfile="$datafile"
  
    mv "$tmpfile" "$datafile" && echo "recorded data succesfully written to $datafile"
  else
    local file=$(basename "$tmpfile")
    outputfile="$tmpfile"
    PNGFILE=$$.png
  fi
  
  echo "average consumption during the last $seconds seconds was $(average $outputfile) W"
  
  read -p "do you want to create a graphic now, too? y/n "
  [[ "$REPLY" = "y" ]] && plot "$outputfile" || exit 0
  
  cleanup

}
# }}}

# calculate average {{{
average() {

  [[ "$@" ]] || errorout 'please specify a file to read from.'
  [[ -f "$@" ]] || errorout 'file not found.'
  check_datafile "$@"
  
  awk 'BEGIN{s=0;}{s+=($1);}END{print s/NR;}' "$@"
}
# }}}

# cleanup {{{
cleanup() { # clean up at least some of the mess i make :P
  rm "$tmpfile1"
}

# make the plot file {{{
makeplotfile() {

  cat << EOF
# gnuplot file
# created by thinkwatt
# $DATE

set title "$TITLE"
set xlabel "$XLABEL"
set ylabel "$YLABEL"
set terminal $TERMINAL
set output "$PNGFILE"
EOF
[[ $YRANGE ]] && echo "set yrange $YRANGE"
[[ $XRANGE ]] && echo "set yrange $YRANGE"
echo 
if [[ $TITLE1 ]];then
  echo "plot \"$datfile\" using (\$1) with lines title \"$TITLE1\" lt 2, \\"
else
  echo "plot \"$datfile\" using (\$1) with lines lt 2, \\"
fi

if [[ $TITLE2 ]];then
  if [[ $avg ]];then
    echo "\"$datfile\" using (\$1) smooth bezier title \"$TITLE2\" lt 1, \\"
  else
    echo "\"$datfile\" using (\$1) smooth bezier title \"$TITLE2\" lt 1"
  fi
else
  if [[ $avg ]];then
    echo "\"$datfile\" using (\$1) smooth bezier lt 1, \\"
  else
    echo "\"$datfile\" using (\$1) smooth bezier lt 1"
  fi
fi

[[ $avg ]] && echo "$avg title \"$file (average, $avg W)\""

}
# }}}

# do the plotting
plot() {
  have_gnuplot=$(find $(sed 's/:/ /g' <<<$PATH) | grep -is gnuplot)
  [[ $have_gnuplot  ]] || errorout 'you have to install gnuplot first'
 
  local datfile="$@"
  check_datafile $datfile
  
  local dir=$(dirname "$datfile")
  local file=$(basename "$datfile")

  [[ "$datfile" ]] || errorout 'please specify a file to read from.'
  [[ -f "$datfile" ]] || errorout 'file not found.'

  [[ -z $TITLE1 ]] && local TITLE1="$file (actual)"
  [[ -z $TITLE2 ]] && local TITLE2="$file (trend)"
   
  local avg=$(average "$datfile" | cut -c1-4)
  
  [[ -d "$TDIR" ]] || mkdir -p "$TDIR"
  makeplotfile > "$PLOTFILE" || errorout 'failed writing plotfile'
  gnuplot "$PLOTFILE"

  [[ $tmpfile ]] && echo "plt and dat file saved in $TDIR" || echo "plt file saved in $TDIR"
  echo "graph saved in your current directory as $PNGFILE"

}

# parse options {{{
parse_options() {

  [[ -z "$1" ]] && message

  while [[ -n "$1" ]]; do
    case "$1" in
      -r|--record)  mode='record'	;;
      -p|--plot)    mode='plot'		;;
      -a|--average) mode='average'	;;
      -h|--help)    message		;;
      *)            args+=( "$1" )	;;
    esac
    shift
  done
}
# }}}

# main {{{
main() {

  case "$mode" in
    record)  record "${args[@]}"	;;
    average) average "${args[@]}"	;;
    plot)    plot "${args[@]}"		;;
    *)       errorout 'invalid mode. use -r, -p or -a.' ;;
  esac
  
}
# }}}

parse_options "$@"
check_ac
main
